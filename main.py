import os
import telebot
from telebot import types
from db import get_db_connection, init_db
import logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")
logging.info(f"User {message.from_user.id} started bot")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
init_db()

# ======================
# –ö–æ–º–∞–Ω–¥–∞ /start
# ======================
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('/help', '/catalog', '/info', '/feedback')
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω üéâ", reply_markup=markup)
    bot.send_message(message.chat.id, "–û—Å—å —â–æ —è –≤–º—ñ—é:\n/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/catalog ‚Äî –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤")

# ======================
# –ö–æ–º–∞–Ω–¥–∞ /help
# ======================
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, "/start ‚Äî –ø–æ—á–∞—Ç–∏\n/help ‚Äî –¥–æ–ø–æ–º–æ–≥–∞\n/catalog ‚Äî –∫–∞—Ç–∞–ª–æ–≥\n/info ‚Äî –ø—Ä–æ –±–æ—Ç–∞\n/feedback ‚Äî –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫")

# ======================
# –ö–æ–º–∞–Ω–¥–∞ /info
# ======================
@bot.message_handler(commands=['info'])
def info_command(message):
    bot.reply_to(message, "ü§ñ –¶–µ –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É. –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")

# ======================
# –ö–æ–º–∞–Ω–¥–∞ /catalog
# ======================
@bot.message_handler(commands=['catalog'])
def catalog_command(message):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name, price FROM products")
    products = cur.fetchall()
    cur.close()
    conn.close()

    if not products:
        bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π üò¢")
        return

    for prod in products:
        prod_id, name, price = prod
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"product_{prod_id}")
        markup.add(btn)
        bot.send_message(message.chat.id, f"{name}\n–¶—ñ–Ω–∞: {price} –≥—Ä–Ω", reply_markup=markup)

# ======================
# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ (–¥–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—É)
# ======================
@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def callback_product_detail(call):
    prod_id = call.data.split("_")[1]
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT name, price, description FROM products WHERE id = %s", (prod_id,))
    prod = cur.fetchone()
    cur.close()
    conn.close()

    if prod:
        name, price, desc = prod
        text = f"üõç {name}\nüíµ –¶—ñ–Ω–∞: {price} –≥—Ä–Ω\nüìÑ –û–ø–∏—Å: {desc}"
        bot.send_message(call.message.chat.id, text)

# ======================
# –ö–æ–º–∞–Ω–¥–∞ /feedback
# ======================
@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    msg = bot.send_message(message.chat.id, "‚úçÔ∏è –ó–∞–ª–∏—à—Ç–µ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:")
    bot.register_next_step_handler(msg, save_feedback)

def save_feedback(message):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("INSERT INTO feedback (user_id, message) VALUES (%s, %s)", (message.from_user.id, message.text))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! üôå")

# ======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ======================
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.polling()

# üîí –°–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
ADMINS = [123456789]  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# üõí –ö–æ–º–∞–Ω–¥–∞ /order ‚Äî —ñ–º—ñ—Ç–∞—Ü—ñ—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@bot.message_handler(commands=['order'])
def order_command(message):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM products")
    products = cur.fetchall()
    cur.close()
    conn.close()

    markup = types.InlineKeyboardMarkup()
    for prod in products:
        markup.add(types.InlineKeyboardButton(prod[1], callback_data=f"order_{prod[0]}"))

    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def handle_order(call):
    product_id = int(call.data.split("_")[1])
    user_id = call.from_user.id

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("INSERT INTO orders (user_id, product_id) VALUES (%s, %s)", (user_id, product_id))
    conn.commit()

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
    for admin in ADMINS:
        bot.send_message(admin, f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}\n–¢–æ–≤–∞—Ä ID: {product_id}")

    bot.send_message(call.message.chat.id, "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!")
    cur.close()
    conn.close()

# üîß /admin –º–µ–Ω—é
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id in ADMINS:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('/add_item', '/remove_item', '/orders')
        bot.send_message(message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üõ†", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É.")

# ‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@bot.message_handler(commands=['add_item'])
def add_item(message):
    if message.from_user.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õîÔ∏è –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ç–æ–≤–∞—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞, –¶—ñ–Ω–∞, –û–ø–∏—Å")
    bot.register_next_step_handler(msg, save_new_product)

def save_new_product(message):
    try:
        name, price, desc = message.text.split(",", 2)
        price = float(price.strip())  # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("INSERT INTO products (name, price, description) VALUES (%s, %s, %s)", (name.strip(), price, desc.strip()))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")

# ‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@bot.message_handler(commands=['remove_item'])
def remove_item(message):
    if message.from_user.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õîÔ∏è –í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    bot.register_next_step_handler(msg, delete_product)

def delete_product(message):
    try:
        prod_id = int(message.text)
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM products WHERE id = %s", (prod_id,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ.")

# üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å
@bot.message_handler(commands=['orders'])
def orders_list(message):
    if message.from_user.id not in ADMINS:
        return
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT orders.id, orders.user_id, products.name 
        FROM orders JOIN products ON orders.product_id = products.id
    """)
    orders = cur.fetchall()
    cur.close()
    conn.close()

    if not orders:
        bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
    else:
        text = "\n".join([f"#{o[0]} ‚Äî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {o[1]}, –¢–æ–≤–∞—Ä: {o[2]}" for o in orders])
        bot.send_message(message.chat.id, text)

# üí¨ –ü—Ä–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∏
@bot.message_handler(func=lambda msg: msg.text.lower() in ["—è–∫ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?", "—è–∫—ñ —Ç–æ–≤–∞—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ?"])
def simple_answers(message):
    if "–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è" in message.text:
        bot.send_message(message.chat.id, "–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–æ–º–∞–Ω–¥–æ—é /order.")
    else:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —á–µ—Ä–µ–∑ /catalog.")
