import os
import telebot
from telebot import types
import psycopg2
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x]

bot = telebot.TeleBot(BOT_TOKEN)

DB_URL = os.getenv("DATABASE_URL")

def get_db_connection():
    return psycopg2.connect(DB_URL)

def create_tables():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            name TEXT,
            price NUMERIC,
            description TEXT
        );
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            product_id INT,
            confirmed BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS feedback (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            username TEXT,
            message TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.commit()
    cur.close()
    conn.close()

def seed_products_if_empty():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM products")
    if cur.fetchone()[0] == 0:
        products = [
            ("–ù–æ—É—Ç–±—É–∫ Lenovo", 18999.99, "15.6‚Äù FullHD, Intel i5, 8GB RAM, SSD 512GB"),
            ("–°–º–∞—Ä—Ç—Ñ–æ–Ω Samsung A53", 12999.00, "6.5‚Äù AMOLED, 128GB, 5G"),
            ("–ù–∞–≤—É—à–Ω–∏–∫–∏ Sony WH-1000XM4", 8999.99, "–ë–µ–∑–ø—Ä–æ–≤—ñ–¥–Ω—ñ –∑ —à—É–º–æ–∑–∞–≥–ª—É—à–µ–Ω–Ω—è–º"),
            ("–ú–æ–Ω—ñ—Ç–æ—Ä LG 27\"", 7499.50, "27‚Äù IPS, 75Hz, FullHD"),
            ("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ Logitech", 1299.00, "–ú–µ—Ö–∞–Ω—ñ—á–Ω–∞, RGB, USB")
        ]
        cur.executemany("INSERT INTO products (name, price, description) VALUES (%s, %s, %s)", products)
        conn.commit()
    cur.close()
    conn.close()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('/catalog', '/help', '/info')
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã\n–Ø ‚Äî –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂—á–µ:",
                     reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.send_message(message.chat.id, """üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start ‚Äî –ø–æ—á–∞—Ç–∏
/catalog ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥
/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/info ‚Äî —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞
/feedback ‚Äî –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫
/admin ‚Äî –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
""")

@bot.message_handler(commands=['info'])
def info_cmd(message):
    bot.send_message(message.chat.id, "üõí –Ø ‚Äî Telegram-–º–∞–≥–∞–∑–∏–Ω –±–æ—Ç. –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —Ç–∞ —Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!")

@bot.message_handler(commands=['catalog'])
def catalog(message):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT id, name, price FROM products")
    for row in cur.fetchall():
        prod_id, name, price = row
        btn = types.InlineKeyboardMarkup()
        btn.add(types.InlineKeyboardButton("–î–µ—Ç–∞–ª—ñ", callback_data=f"details_{prod_id}"))
        bot.send_message(message.chat.id, f"{name}\nüí∏ {price} –≥—Ä–Ω", reply_markup=btn)
    cur.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("details_"))
def show_details(call):
    prod_id = int(call.data.split("_")[1])
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT name, price, description FROM products WHERE id=%s", (prod_id,))
    product = cur.fetchone()
    if product:
        name, price, desc = product
        btn = types.InlineKeyboardMarkup()
        btn.add(types.InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏", callback_data=f"order_{prod_id}"))
        bot.send_message(call.message.chat.id, f"üì¶ {name}\nüí∏ {price} –≥—Ä–Ω\nüìù {desc}", reply_markup=btn)
    cur.close()
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def confirm_order(call):
    prod_id = int(call.data.split("_")[1])
    user = call.from_user
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("INSERT INTO orders (user_id, username, product_id) VALUES (%s, %s, %s)",
                (user.id, user.username, prod_id))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(call.message.chat.id, "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏.")
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"üì• –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø –≤—ñ–¥ @{user.username} (ID: {user.id}) –Ω–∞ —Ç–æ–≤–∞—Ä {prod_id}")

@bot.message_handler(commands=['feedback'])
def feedback(message):
    bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:")
    bot.register_next_step_handler(message, save_feedback)

def save_feedback(message):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("INSERT INTO feedback (user_id, username, message) VALUES (%s, %s, %s)",
                (message.from_user.id, message.from_user.username, message.text))
    conn.commit()
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫!")
    for admin_id in ADMIN_IDS:
        bot.send_message(admin_id, f"üì¢ –í–Ü–î–ì–£–ö –≤—ñ–¥ @{message.from_user.username}: {message.text}")

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id not in ADMIN_IDS:
        return bot.send_message(message.chat.id, "‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('/add_item', '/remove_item', '/orders')
    bot.send_message(message.chat.id, "üîß –ê–¥–º—ñ–Ω-–º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(commands=['add_item'])
def add_item(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É, —Ü—ñ–Ω—É, –æ–ø–∏—Å —á–µ—Ä–µ–∑ | (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ù–∞–∑–≤–∞|999.99|–û–ø–∏—Å):")
    bot.register_next_step_handler(message, save_new_product)

def save_new_product(message):
    try:
        name, price, desc = message.text.split("|")
        price = float(price)
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("INSERT INTO products (name, price, description) VALUES (%s, %s, %s)",
                    (name.strip(), price, desc.strip()))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ù–∞–∑–≤–∞|999.99|–û–ø–∏—Å")

@bot.message_handler(commands=['remove_item'])
def remove_item(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, delete_product)

def delete_product(message):
    try:
        prod_id = int(message.text)
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM products WHERE id=%s", (prod_id,))
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(message.chat.id, "üóëÔ∏è –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π ID.")

@bot.message_handler(commands=['orders'])
def view_orders(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT o.id, o.user_id, o.username, p.name, o.created_at FROM orders o
        JOIN products p ON o.product_id = p.id ORDER BY o.created_at DESC
    """)
    text = "\n".join([f"{row[0]}. @{row[2]} - {row[3]} ({row[4]})" for row in cur.fetchall()]) or "–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å."
    cur.close()
    conn.close()
    bot.send_message(message.chat.id, f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{text}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
create_tables()
seed_products_if_empty()
bot.polling(none_stop=True)
