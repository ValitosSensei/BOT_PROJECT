import telebot
from telebot import types
import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = telebot.TeleBot(BOT_TOKEN)
ADMIN_IDS = [123456789]  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
conn = psycopg2.connect(DATABASE_URL, sslmode='require')
cur = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
cur.execute("""
CREATE TABLE IF NOT EXISTS products (
    id SERIAL PRIMARY KEY,
    name TEXT,
    description TEXT,
    price NUMERIC
);
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS purchases (
    id SERIAL PRIMARY KEY,
    user_id BIGINT,
    username TEXT,
    product_id INTEGER REFERENCES products(id)
);
""")

cur.execute("""
CREATE TABLE IF NOT EXISTS feedback (
    id SERIAL PRIMARY KEY,
    user_id BIGINT,
    username TEXT,
    message TEXT
);
""")
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('/catalog', '/help', '/info', '/feedback')
    bot.send_message(message.chat.id,
                     f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω. –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∑ –º–µ–Ω—é.",
                     reply_markup=markup)

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def help_msg(message):
    bot.send_message(message.chat.id, """
–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start ‚Äî –∑–∞–ø—É—Å–∫
/catalog ‚Äî –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤
/order ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
/feedback ‚Äî –∑–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫
/info ‚Äî —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞
/admin ‚Äî –º–µ–Ω—é –¥–ª—è –∞–¥–º—ñ–Ω—É
""")

# –ö–æ–º–∞–Ω–¥–∞ /info
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id, "–Ø –ø—Ä–æ—Å—Ç–∏–π Telegram –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –∑ –∫–∞—Ç–∞–ª–æ–≥–æ–º —ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.")

# –ö–∞—Ç–∞–ª–æ–≥
@bot.message_handler(commands=['catalog'])
def catalog(message):
    cur.execute("SELECT * FROM products")
    products = cur.fetchall()
    if not products:
        bot.send_message(message.chat.id, "–ö–∞—Ç–∞–ª–æ–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    for product in products:
        product_id, name, desc, price = product
        btn = types.InlineKeyboardMarkup()
        btn.add(types.InlineKeyboardButton(f"–ó–∞–º–æ–≤–∏—Ç–∏ {name}", callback_data=f"order_{product_id}"))
        bot.send_message(message.chat.id, f"üõçÔ∏è {name}\nüí¨ {desc}\nüí∞ {price} –≥—Ä–Ω", reply_markup=btn)

# –û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def confirm_order(call):
    product_id = int(call.data.split("_")[1])
    user_id = call.from_user.id
    username = call.from_user.username or "NoUsername"
    cur.execute("INSERT INTO purchases (user_id, username, product_id) VALUES (%s, %s, %s)",
                (user_id, username, product_id))
    conn.commit()
    bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!")
    bot.send_message(call.message.chat.id, "‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!")
    for admin in ADMIN_IDS:
        bot.send_message(admin, f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username} –Ω–∞ —Ç–æ–≤–∞—Ä ID {product_id}")

# –ö–æ–º–∞–Ω–¥–∞ /order
@bot.message_handler(commands=['order'])
def user_order(message):
    bot.send_message(message.chat.id, "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /catalog —â–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä.")

# –í—ñ–¥–≥—É–∫
@bot.message_handler(commands=['feedback'])
def feedback(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫:")
    bot.register_next_step_handler(msg, save_feedback)

def save_feedback(message):
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"
    msg_text = message.text
    cur.execute("INSERT INTO feedback (user_id, username, message) VALUES (%s, %s, %s)",
                (user_id, username, msg_text))
    conn.commit()
    bot.send_message(message.chat.id, "–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫!")
    for admin in ADMIN_IDS:
        bot.send_message(admin, f"–ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ @{username}: {msg_text}")

# –ö–æ–º–∞–Ω–¥–∞ /admin
@bot.message_handler(commands=['admin'])
def admin_menu(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "–ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:\n/add_item\n/remove_item\n/orders")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@bot.message_handler(commands=['add_item'])
def add_item(message):
    if message.from_user.id in ADMIN_IDS:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–æ–≤–∞—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ: –ù–∞–∑–≤–∞ | –û–ø–∏—Å | –¶—ñ–Ω–∞")
        bot.register_next_step_handler(msg, save_item)

def save_item(message):
    try:
        name, desc, price = message.text.split("|")
        price = float(price.strip())
        cur.execute("INSERT INTO products (name, description, price) VALUES (%s, %s, %s)",
                    (name.strip(), desc.strip(), price))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: " + str(e))

# –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
@bot.message_handler(commands=['remove_item'])
def remove_item(message):
    if message.from_user.id in ADMIN_IDS:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ ID —Ç–æ–≤–∞—Ä—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
        bot.register_next_step_handler(msg, delete_item)

def delete_item(message):
    try:
        product_id = int(message.text.strip())
        cur.execute("DELETE FROM products WHERE id = %s", (product_id,))
        conn.commit()
        bot.send_message(message.chat.id, "üóëÔ∏è –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID.")

# –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å
@bot.message_handler(commands=['orders'])
def orders(message):
    if message.from_user.id in ADMIN_IDS:
        cur.execute("SELECT * FROM purchases")
        orders = cur.fetchall()
        if not orders:
            bot.send_message(message.chat.id, "–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        for o in orders:
            bot.send_message(message.chat.id, f"ID: {o[0]} | User: @{o[2]} | Product ID: {o[3]}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
